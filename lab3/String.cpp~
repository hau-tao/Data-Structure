#include <cstring>
#include "String.h"

String:: String(){
	size = 0;
	buffer = 0;

}
int String::length(){
	return size;
} 
char &String::operator[](const unsigned i){
	return buffer[i];
}
String &String:: operator+=(const String &s){
	strcat(String(*this),s);
	return String(*this);
}
String:: String (const String &source){
	size = source.size;
	buffer = new char[size];
	for( int i =0; i< size;++i){
		buffer[i] = source.buffer[i];
	}
}
String:: String(const char *p){
	size = strlen(p);
	buffer = new char[size];
	for( int i = 0 ; i< size; i++)
		buffer[i] = p[i];

}
String:: ~ String(){
	delete[] buffer;
	size = 0;
}
bool operator==(const String &left, const String &right ){
	int i, j;
	for(i=0, j=0; i<left.size && j<right.size; i++,j++)
		if(left.buffer[i] != right.buffer[i])
			return false;
	if (i == left.size && j == right.size)
		return true;
	 
	return false;

}
bool operator <= (const String &left, const String &right){
	int i ,j ;
	for(i=0, j=0; i<left.size && j<right.size; i++,j++)
		if(left.buffer[i] > right.buffer[i])
			return false;
	return true;
}
bool operator < (const String &left, const String &right){
	int i ,j ;
	for(i=0, j=0; i<left.size && j<right.size; i++,j++)
		if(left.buffer[i] >= right.buffer[i])
			return false
;	return true;
}
ostream & operator<< (ostream &out , const String &s){
	for (int i =0; i< s.size; i++)
		out << s.buffer[i];
	return out;

}
